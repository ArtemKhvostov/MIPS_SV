
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module MIPS_SV(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_SCK,
	output		          		ADC_SDI,
	input 		          		ADC_SDO,

	//////////// ARDUINO //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// GPIO_0, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);
  
  
  
  //=======================================================
  //  REG/WIRE declarations
  //=======================================================
  logic	[31:0]	A, B, S1, S2, S3, S4;
  logic [ 1:0]  KEY_DeB, KEY_PRS, KEY_DeP;
  logic         cMW_Mem, cMW_Reg;
  logic RESET;
  logic CLK_PLL;
  //=======================================================
  //  Structural coding
  //=======================================================
  assign LED[6] = 1'b0; //8'h00;
  assign ADC_CONVST = 0;
  assign ADC_SCK = 0;
  assign ADC_SDI = 0;
  assign ARDUINO_IO = 16'hzzzz;
  assign ARDUINO_RESET_N = 1'bz;
  assign GPIO_0[35: 4] = 32'hzzzzzzzzz; // 36'hz;
  assign GPIO_1[35: 2] = 34'hzzzzzzzzz;  // 36'hz;
  
  AlteraPLL         PLL ( FPGA_CLK1_50, ~KEY[0], CLK_PLL );
  
  // Reset synchronization register
  always_ff@( posedge CLK_PLL or negedge KEY[0] ) begin
    if( !KEY[0] ) RESET <= 1'b1;
    else RESET <= KEY_DeB[0];
  end
  
  DeBounce_Rst #10000000 DEB_0( .Clk( FPGA_CLK1_50 ), .di_Key( ~KEY[0] ), .do_rst( KEY_DeB[0] ) );
  //DeBounce #1000000  DEB_0 ( .Clk( FPGA_CLK1_50 ), .Srst( ), .di_Key( ~KEY[0] ), .do_Key( KEY_DeB[0] ), .do_Press( KEY_PRS[0] ), .do_DePrs( KEY_DeP[0] ));
  DeBounce #1000000  DEB_1 ( .Clk( FPGA_CLK1_50 ), .Srst( ), .di_Key( ~KEY[1] ), .do_Key( KEY_DeB[1] ), .do_Press( KEY_PRS[1] ), .do_DePrs( KEY_DeP[1] ));
 
  DeSerializer	#5	Des1	( .Clk( CLK_PLL ), .Srst( RESET ), .Init(            GPIO_0[0] ),  .In(  GPIO_0[1] ), .Out(         A ), .Ready()  );
  DeSerializer	#5	Des2	( .Clk( CLK_PLL ), .Srst( RESET ), .Init(            GPIO_0[0] ),  .In(  GPIO_0[2] ), .Out(         B ), .Ready()  );
                                                                                                                                                                                                                                                                       
  Serializer		#6	Ser1	( .Clk( CLK_PLL ), .Srst( RESET ), .Init( cMW_Mem && GPIO_0[0] ),  .In( { S1, S2 } ), .Out( GPIO_1[0] ), .Ready()  );
  Serializer		#6	Ser2	( .Clk( CLK_PLL ), .Srst( RESET ), .Init( cMW_Reg && GPIO_0[0] ),  .In( { S3, S4 } ), .Out( GPIO_1[1] ), .Ready()  );
    
   CPU CPU ( 
     .clk          (      CLK_PLL ), 
     .ci_rst       (        RESET ),
   
     .ciInstInp    (    GPIO_0[3] ),
     .diInstToMem  (            A ),
     .diInstAddr   (            B ),
   
     .writedataM   (           S1 ), 
     .adrM         (           S2 ),
     .memwriteM    (      cMW_Mem ),
                             
     .writedataR   (           S3 ), 
     .adrR         (           S4 ),
     .memwriteR    (      cMW_Reg )
   );
   
  
endmodule
